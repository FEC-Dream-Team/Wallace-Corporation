(self.webpackChunkwallace_corporation=self.webpackChunkwallace_corporation||[]).push([[197],{7615:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l});var n=r(7294),a=r(5430);function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const l=function(e){var t,r,l=e.photo,i=(t=(0,n.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(t,r)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=i[0],u=i[1];return l?n.createElement("span",{className:c?a.Z.overlayPhoto:""},c?n.createElement("img",{role:"presentation",src:l.url?l.url:l,alt:"review",className:a.Z.photo,onClick:function(){return u(!c)},onKeyDown:function(){return u(!c)}}):n.createElement("img",{role:"presentation",src:l.url?l.url:l,alt:"review",className:a.Z.imgThumbnail,onClick:function(){return u(!c)},onKeyDown:function(){return u(!c)}})):null}},2529:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var n=r(7294),a=r(5430),o=r(9669),l=r.n(o),i=r(7248);const c={body:'<path class="clr-i-solid clr-i-solid-path-1" d="M5.92 2a1 1 0 0 0-1 1v30a1 1 0 0 0 2 0V3a1 1 0 0 0-1-1z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-2" d="M30.5 3.82a1 1 0 0 0-1 0a14.9 14.9 0 0 1-6.13 1.16a13.11 13.11 0 0 1-5.18-1.49A12.78 12.78 0 0 0 13.2 2a10.86 10.86 0 0 0-4.2.85V20a8.8 8.8 0 0 1 4.25-1.08a11.22 11.22 0 0 1 4.2 1.28a14.84 14.84 0 0 0 6 1.66a16.79 16.79 0 0 0 7-1.37a1 1 0 0 0 .55-.89V4.67a1 1 0 0 0-.5-.85z" fill="currentColor"/>',width:36,height:36};function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const m=function(e){var t=e.helpfulness,r=u((0,n.useState)(t),2),o=r[0],s=r[1],m=u((0,n.useState)("Report"),2),f=m[0],p=m[1],d=u((0,n.useState)(!1),2),y=d[0],h=d[1];return n.createElement("div",{className:a.Z.helpful},n.createElement("div",{"data-testid":"helpfulText",className:a.Z.helpful},"Was this helpful?"),n.createElement("button",{"data-testid":"helpful-button",type:"submit",onClick:function(r){if(s(t+1),e.review_id){var n=e.review_id;l().put("/reviews/".concat(n,"/helpful")).then((function(e){return console.log(e.status)})).catch((function(e){return console.log(e)}))}else if(e.question_id){var a=e.question_id;l().put("/qa/questions/".concat(a,"/helpful")).then((function(e){return console.log(e.status)})).catch((function(e){return console.log(e)}))}else if(e.answer_id){var o=e.answer_id;l().put("/qa/answers/".concat(o,"/helpful")).then((function(e){return console.log(e.status)})).catch((function(e){return console.log(e)}))}},className:a.Z.helpfulButton,value:"yes"},"Yes"),n.createElement("div",{"data-testid":"helpful-count",className:"".concat(a.Z.helpful," ").concat(a.Z.helpfulCount)},"(",o,")"," "),n.createElement("button",{"data-testid":"report-button",className:y?a.Z.reportedTrue:a.Z.reported,onClick:function(){p("Reported"),h(!0),e.answer_id?l().put("/qa/answers/".concat(e.answer_id,"/report")).then((function(){return console.log(status.status)})).catch(console.log):e.review_id?l().put("/reviews/".concat(e.review_id,"/report")).then((function(){return console.log(status.status)})).catch(console.log):l().put("/qa/questions/".concat(e.question_id,"/report")).then((function(){return console.log(status.status)})).catch(console.log)},type:"submit"},f),y?n.createElement(i.JO,{className:a.Z.flag,icon:c}):null)}},3197:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>q});var n=r(7294),a=r(9669),o=r.n(a),l=r(1414),i=r(5981),c=r(2529),u=r(7615);function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var m=function(e){var t=e.rating/5*100,r=Math.round(5*t)/5;return n.createElement("div",{className:i.Z.starRating,style:{justifyContent:"left"}},n.createElement("div",{className:i.Z.starRatingTop,style:{width:r}},n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★")),n.createElement("div",{className:i.Z.starRatingBottom},n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★"),n.createElement("span",null,"★")))},f=function(e){var t=e.review,r=function(e){var t=e.slice(0,e.indexOf("T")).split("-"),r=t.shift();return t.push(r),t.join("-")}(t.date);return n.createElement("div",null,n.createElement("span",{style:{fontSize:10,fontStyle:"italic"}},"✓ Verified Purchaser"),n.createElement("div",{className:i.Z.userDateBar},t.reviewer_name),n.createElement("div",{className:i.Z.userDateBar},r))};const p=function(e){var t,r,a=e.review,o=(t=(0,n.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(t,r)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return o[0],o[1],n.createElement("div",null,n.createElement("div",{className:i.Z.reviewTemplate},n.createElement(m,{rating:a.rating}),n.createElement("div",{className:i.Z.templateSummary},a.summary),n.createElement("div",{className:i.Z.templateBody,style:{fontSize:"15px"}},a.body),n.createElement("div",{className:i.Z.templateUserDateBar},n.createElement(f,{review:a})),n.createElement("div",{className:i.Z.templateHelpfulReportBar},n.createElement(c.Z,{review_id:a.review_id,helpfulness:a.helpfulness})),a.response?n.createElement("div",{className:i.Z.templateResponseFromSeller},n.createElement("p",{style:{margin:"0px",fontWeight:"bolder",padding:"10px 10px 0 10px",fontSize:"15px"}},"Response from seller:"),n.createElement("p",{style:{margin:"0px",padding:"10px",fontSize:"15px"}},a.response)):null,n.createElement("div",{className:i.Z.templateImages},a.photos.map((function(e,t){return n.createElement(u.Z,{photo:e,key:t})}))),a.recommend?n.createElement("div",{className:i.Z.templateRecommendsBar,style:{paddingRight:"10px",fontSize:"12px"}},"✓ Yes, I recommend this product"):null))};var d=r(5430);function y(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?y(Object(r),!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):y(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function v(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const b=function(e){var t,r,a=e.characteristics,o=e.charObject,l=e.setReview,i=e.review,c=(t=(0,n.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(t,r)||function(e,t){if(e){if("string"==typeof e)return g(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?g(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=c[0],s=(c[1],function(e){var t=e.target.value.split("-"),r=t[0],n=t[1],a=u;a[n]=Number(r),l(h(h({},i),{},{characteristics:a}))});return a?Object.entries(a).map((function(e){return n.createElement("div",{key:e[1].id,onChange:s,"data-testid":"characteristic-map"},n.createElement("p",null,e[0]," *"),n.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat(5, 30%)",fontSize:"10px"}},n.createElement("div",{style:{display:"grid",gridTemplateRows:"auto auto",gridColumn:"1/2"}},n.createElement("label",{style:{gridRow:"2/3",justifySelf:"center"},htmlFor:"one"},o[e[0]][1]),n.createElement("input",{type:"radio",name:e[0],value:"1-".concat(e[1].id),style:{gridRow:"1/2",justifySelf:"center"}})),n.createElement("div",{style:{display:"grid",gridTemplateRows:"auto auto",gridColumn:"2/3"}},n.createElement("label",{style:{gridRow:"2/3",justifySelf:"center"},htmlFor:"two"},o[e[0]][2]),n.createElement("input",{type:"radio",name:e[0],value:"2-".concat(e[1].id),style:{gridRow:"1/2",justifySelf:"center"}})),n.createElement("div",{style:{display:"grid",gridTemplateRows:"auto auto",gridColumn:"3/4"}},n.createElement("label",{style:{gridRow:"2/3",justifySelf:"center"},htmlFor:"three"},o[e[0]][3]),n.createElement("input",{type:"radio",name:e[0],value:"3-".concat(e[1].id),style:{gridRow:"1/2",justifySelf:"center"}})),n.createElement("div",{style:{display:"grid",gridTemplateRows:"auto auto",gridColumn:"4/5"}},n.createElement("label",{style:{gridRow:"2/3",justifySelf:"center"},htmlFor:"four"},o[e[0]][4]),n.createElement("input",{type:"radio",name:e[0],value:"4-".concat(e[1].id),style:{gridRow:"1/2",justifySelf:"center"}})),n.createElement("div",{style:{display:"grid",gridTemplateRows:"auto auto",gridColumn:"5/6"}},n.createElement("label",{style:{gridRow:"2/3",justifySelf:"center"},htmlFor:"five"},o[e[0]][5]),n.createElement("input",{type:"radio",name:e[0],value:"5-".concat(e[1].id),style:{gridRow:"1/2",justifySelf:"center"}}))))})):null};function w(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function E(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?w(Object(r),!0).forEach((function(t){S(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):w(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function S(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(e,t)||O(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function O(e,t){if(e){if("string"==typeof e)return R(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?R(e,t):void 0}}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Z=function(e){var t,r=e.review,a=e.setReview,o=j((0,n.useState)(0),2),l=o[0],c=o[1],u=j((0,n.useState)(0),2),s=u[0],m=u[1],f=j((0,n.useState)(""),2),p=f[0],d=f[1],y={1:"Poor",2:"Fair",3:"Average",4:"Good",5:"Great"};return n.createElement("div",{required:"required"},(t=Array(5),function(e){if(Array.isArray(e))return R(e)}(t)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(t)||O(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e,t){return t+=1,n.createElement("button",{type:"button",key:t,className:"".concat(t<=(s||l)?i.Z.on:i.Z.off," ").concat(i.Z.button),onClick:function(){c(t),function(e){d(y[e])}(t)},onMouseEnter:function(){c(l),a(E(E({},r),{},{rating:t}))},onMouseLeave:function(){return m(l)}},n.createElement("span",{"data-testid":"interactive-stars"},"★"))})),n.createElement("p",{className:i.Z.comment},p))};function A(e){return function(e){if(Array.isArray(e))return k(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||I(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function x(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?N(Object(r),!0).forEach((function(t){P(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):N(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function P(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(e,t)||I(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){if(e){if("string"==typeof e)return k(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?k(e,t):void 0}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const T=function(e){var t=e.productId,r=e.onClose,a=e.open,l=e.getReviews,c=e.name,u=e.metaReviews,s=e.charObject,m=C((0,n.useState)({product_id:t,rating:"",summary:"",body:"",recommend:"",name:"",email:"",photos:[],characteristics:{}}),2),f=m[0],p=m[1],y=C((0,n.useState)([]),2),h=y[0],v=y[1],g=C((0,n.useState)({email:"",photoSize:"",missingFields:""}),2),w=g[0],E=g[1],S=C((0,n.useState)(50),2),j=S[0],O=S[1],R=RegExp(/^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i);return u&&f&&f.photos?n.createElement(n.Fragment,null,n.createElement("div",{style:{maxHeight:"100%"},role:"presentation",onClick:function(){r()},className:a?d.Z.overlay:""}),n.createElement("div",{style:{transform:a?"translate(-50%, -50%)":"translate(-50%, -150vh)"},className:d.Z.modal},n.createElement("div",{className:d.Z.modalHeader},n.createElement("h3",null,"Write Your Review"),n.createElement("p",null,"About the ",c,"..."),n.createElement("p",{"data-testid":"review-modal",role:"presentation",className:d.Z.closeModal,onClick:function(){r()}},"x")),n.createElement("div",{className:d.Z.modalBody},n.createElement("form",{onSubmit:function(e){!function(e){e.preventDefault();var n=x({},f),a=[];R.test(n.email)?n.body.length<50||""===n.rating||""===n.recommend||""===n.name||Object.keys(n.characteristics)!==Object.keys(u.characteristics)?E(x(x({},w),{},{missingFields:"*One or more mandatory fields is missing"})):n.photos.map((function(e){if(e.size>1e5)E(x(x({},w),{},{photoSize:"*The images selected are invalid or unable to be uploaded"}));else{var i,c={name:e.name,data:""},u=(i=e,new Promise((function(e,t){var r=new FileReader;r.readAsDataURL(i),r.onload=function(){return e(r.result)},r.onerror=function(e){return t(e)}}))).then((function(e){return c.data=e.split(",")[1]})).then((function(){return o().post("/upload_images",c)})).then((function(e){return e.data})).catch(console.log);a.push(u),Promise.all(a).then((function(e){n.photos=e})).then((function(){return o().post("/reviews",n)})).then((function(){return l(t)})).then((function(){return r()})).catch(console.log)}})):E(x(x({},w),{},{email:"*You must enter a valid email"}))}(e)},action:"",encType:"multipart/form-data",style:{fontSize:"12px"}},n.createElement("p",{style:{margin:"5px"}},"Overall Rating: *"),n.createElement("span",{className:i.Z.starRating},n.createElement(Z,{review:f,setReview:p})),n.createElement("p",null,"Would you recommend this product? *"),n.createElement("div",null,n.createElement("input",{type:"radio",id:"Yes",name:"recommend",onClick:function(){return p(x(x({},f),{},{recommend:!0}))}}),n.createElement("label",{htmlFor:"Yes"},"Yes"),n.createElement("input",{type:"radio",id:"No",name:"recommend",onClick:function(){return p(x(x({},f),{},{recommend:!1}))}}),n.createElement("label",{htmlFor:"No"},"No")),n.createElement(b,{characteristics:u.characteristics,charObject:s,setReview:p,review:f}),n.createElement("p",null,"Review Title:"),n.createElement("input",{onChange:function(e){return p(x(x({},f),{},{summary:e.target.value}))},className:i.Z.modalInput,maxLength:"60",placeholder:"Example: Best purchase ever!",type:"text",style:{fontSize:"12px"}}),n.createElement("p",null,"Review Body: *"),n.createElement("textarea",{required:"required",onChange:function(e){p(x(x({},f),{},{body:e.target.value})),function(e){var t=e.target.value;O(50-t.length)}(e)},minLength:"50",maxLength:"1000",className:d.Z.qInput,placeholder:"Why did you like the product or not?",type:"text"}),n.createElement("p",{className:i.Z.comment},j<=0?"Minimum Characters Reached":"Minimum required characters left: ".concat(j)),n.createElement("p",null,"What is your nickname? *"),n.createElement("input",{required:"required",onChange:function(e){return p(x(x({},f),{},{name:e.target.value}))},className:i.Z.modalInput,maxLength:"60",type:"text",placeholder:"Example: jackson11!",style:{fontSize:"12px"}}),n.createElement("p",{className:d.Z.finePrint},f.name.length>0?"For privacy reasons, do not use your full name or email address":""),n.createElement("p",null,"What is your email? *"),n.createElement("input",{required:"required",onChange:function(e){return p(x(x({},f),{},{email:e.target.value}))},className:i.Z.modalInput,maxLength:"60",type:"text",placeholder:"Example: jackson11@email.com",style:{fontSize:"12px"}}),n.createElement("p",{className:d.Z.finePrint},f.email.length>0?"For authentication reasons, you will not be emailed":""),n.createElement("div",null),n.createElement("div",null,f.photos.length<5?n.createElement("input",{value:"",onChange:function(e){f.photos.length<5&&(p(x(x({},f),{},{photos:[].concat(A(f.photos),[e.target.files[0]])})),v([].concat(A(h),[URL.createObjectURL(e.target.files[0])])))},type:"file"}):null,h.map((function(e){return n.createElement("img",{alt:e,key:e,className:"".concat(i.Z.imgThumbnail," ").concat(i.Z.reviewPhoto),src:e})}))),n.createElement("p",{className:i.Z.comment},"* Mandatory Fields"),n.createElement("p",{className:d.Z.finePrint},w.email),n.createElement("p",{className:d.Z.finePrint},w.photoSize),n.createElement("p",{className:d.Z.finePrint},w.missingFields),n.createElement("button",{type:"submit",className:d.Z.modalButton},"Submit Review"))))):null};function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(n=(l=i.next()).done)&&(r.push(l.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}}(e,t)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?F(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r(9698);const q=function(e){var t=e.productId,r=e.name,a=e.handleReviewAverage,c=z((0,n.useState)([]),2),u=c[0],s=c[1],m=z((0,n.useState)([]),2),f=m[0],d=m[1],y=z((0,n.useState)([]),2),h=y[0],v=y[1],g=z((0,n.useState)(!1),2),b=g[0],w=g[1],E=z((0,n.useState)(!1),2),S=E[0],j=E[1],O=z((0,n.useState)("relevant"),2),R=O[0],Z=O[1],A=z((0,n.useState)("More Reviews"),2),N=A[0],x=A[1],P={Size:{1:"A size too small",2:"1/2 a size too small",3:"Perfect",4:"1/2 a size too big",5:"A size too wide"},Width:{1:"Too narrow",2:"Slightly narrow",3:"Perfect",4:"Slightly wide",5:"Too wide"},Comfort:{1:"Uncomfortable",2:"Slightly uncomfortable",3:"Ok",4:"Comfortable",5:"Perfect"},Quality:{1:"Poor",2:"Below average",3:"What I expected",4:"Pretty great",5:"Perfect"},Length:{1:"Runs short",2:"Runs slightly short",3:"Perfect",4:"Runs slightly long",5:"Runs long"},Fit:{1:"Runs tight",2:"Runs slightly tight",3:"Perfect",4:"Runs slightly long",5:"Runs long"}},C=function(e){var t="/reviews/sort/".concat(e,"/").concat(R);o().get(t).then((function(e){var t=e.data;s(t),d(S?t:t.slice(0,2))})).catch(console.log)};return(0,n.useEffect)((function(){C(20101),j(S)}),[R]),(0,n.useEffect)((function(){var e;e="/reviews/meta/".concat(20101),o().get(e).then((function(e){var t=e.data;v(t)})).catch((function(e){return console.log(e)})),C(20101)}),[t]),(0,n.useEffect)((function(){d(S?u:u.slice(0,2))}),[S]),(0,n.useEffect)((function(){f.length<=2?x("More Reviews"):x("Show Less Reviews")}),[f]),h&&u&&t?n.createElement("div",{className:i.Z.parentContainer},n.createElement("div",{className:i.Z.parentBreakdown},n.createElement(l.Z,{reviews:u,metaReviews:h,handleStarFilters:function(e){var t=[];0===e.length?d(u.slice(0,2)):(e.map((function(e){u.filter((function(r){r.rating===Number(e)&&t.push(r)}))})),d(t))},handleReviewAverage:a,charObject:P})),n.createElement("div",{className:i.Z.parentHeader,style:{display:"flex"}},n.createElement("div",{style:{alignSelf:"center",paddingLeft:"20px"},"data-testid":"sort-on-dropdown"},"Sort on:",n.createElement("select",{onChange:function(e){return Z(e.target.value)}},n.createElement("option",null,"Relevant"),n.createElement("option",null,"Helpful"),n.createElement("option",null,"Newest")))),n.createElement("div",{style:{maxHeight:"800px",overflowY:"scroll"},className:i.Z.parentIndividualReview},f.map((function(e,t){return n.createElement(p,{review:e,key:t})}))),n.createElement("div",{className:i.Z.parentFooter},u.length>1?n.createElement("button",{className:i.Z.footerButton,type:"submit",onClick:function(){j(!S)}},N):null,n.createElement("button",{className:i.Z.footerButton,type:"submit",onClick:function(){return w(!0)}},"Add Review  + "),n.createElement(T,{productId:t,getReviews:C,onClose:function(){return w(!1)},open:b,name:r,metaReviews:h,charObject:P}))):null}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,